1. Argument and Option

clear : clear screen
date : date of today
cal : calender of this month
cal 2030 : calender of 2030
cal 9 2021 : calender of september in 2021
cal 2021 9 -> Do not work
cal -y : calender of this year
cal -B 2 : show calender from two months before to this month
cal -A 2 : show calender from this month to two months after
cal -B 2 -A 2 == cal -A 2 -B 2
cal -j : date is count from January 1st
cal -jA 2 -B 2 == -A 2 -jB 2
cal -Aj 2 -B 2 : Do Not Work
cal -h : unhighlight today
man cal : manual of cal
On the manual -> space : go down 1 page, b : go up 1 page, q : quit manual and go back

2. Directory

~ (tilde) : Home directory of current user
pwd : Print the name of Working Directory, Print current directory
print result -> /Users/jutlo : the first '/' is the root directory

cd : Change Directory, change current directory
cd /Users/jutlo/Pictures
pwd
-> print result : /Users/jutlo/Pictures

cd ~
change to home directory again
and
cd /Users/jutlo/Pictures == cd ./Pictures : '.' means current directory

Let's keep going

cd ../Documents : '..' means the parent directory of current directory
pwd 
-> print result : /Users/jutlo/Documents

When change to child directory of current directory -> cd Pictures == cd ./Pictures

cd / : change directory to root directory
cd ~ : change directory to home directory
cd - : change directory to previous directory

ls : show the list of child directories and files in the current directory
ls -l : long list format -> more detailed info
ls -a : all -> show all the hidden directories and hidden files
* ls command doesn't show the files or directories whose name start with '.' (hidden) -> -a option let ls command show hidden directories and files whose name start with '.'
* Usually files that is not to be modified are hidden

ls .viminfo : show only .viminfo in the current directory
ls -l .viminfo : long list format of .viminfo
ls -l Pictures : long list format of files in Pictures directory which is in the current directory
ls -l -d Pictures : long list format of Pictures directory itself

The left-most column of long list format can tell the type of files :
파일 종류	/ 문자
일반 파일	/ -
디렉토리 / d
캐릭터 장치 / 파일	c
블록 장치 파일 / b
소켓 / s
파이프 / p
심볼릭 링크 / l

mkdir : make a new directory in the current directory
mkdir parent : make parent directory in the current directory
mkdir parent/child : (parent directory was created with the command above) make child directory in the parent directory

touch : make a new file in the current directory 
touch test : make test file in the current directory

mv : move file or directory
mv test child : move test file in the current directory to child directory in the current directory
mv test .. : move test to parent directory of current directory, Use relative path
mv test /Users/Jutlo : Can also use absolute path 

mv : can also change name of file or directory
mv test sample : change the name of test file to sample
mv child kid : change the name of child directory to kid

이전 영상에서 mv 커맨드는

1. 파일 / 디렉토리의 이름 변경

2. 파일 / 디렉토리의 위치 이동 

이라는 두 가지 기능을 한다고 했는데요. 

언제 1로 작동하고, 언제 2로 작동하는 걸까요? 

다음과 같은 2가지 경우로 나누어 생각해봅시다. 

1. 파일을 옮기는 경우

mv file DEST 

(1) DEST가 나타내는 경로가 이미 존재하는 디렉토리라면 그 디렉토리 안으로 file이 이동합니다.

(2) DEST가 나타내는 경로가 아직 존재하지 않는 경로라면 그 경로명대로 이름 변경 혹은 위치 이동 혹은 둘 다를 할 수도 있습니다. 예를 들면 DEST가 file2면 이름만 file2로 바뀌겠죠? 하지만 DEST가 ../file이라면 위치 이동만 할 겁니다. 마지막으로 DEST가 ../file2라면 이름 변경도 되고 위치 이동도 되겠죠?

이때 주의해야할 점이 하나 있는데요. 이동하게 되는 디렉토리 안에 DEST와 이미 같은 이름의 파일이 있으면 그 파일을 덮어쓰게 됩니다. 이런 일을 방지하려면 mv 커맨드를 쓸 때 -i 옵션을 주면 됩니다. i는 interactive의 줄임말로 혹시 덮어쓰게 될 상황이 생기면 바로 덮어쓰지는 않고 사용자의 의견을 물어보겠다는 뜻인데요. 그러니까 나도 모르게 파일을 덮어쓰는 일을 방지하려면

mv -i file ../alreadyExists

이런 식으로 적어줘야 한다는 거죠. 그럼 터미널에서 "overwrites ../alreadyExists?" 가 출력되면서 정말 덮어쓸 건지를 물어볼 겁니다. 이때 y(yes)를 입력하면 덮어써지게 되고, n(no)를 누르면 아무 일도 일어나지 않습니다. -i 옵션을 주지 않으면 우리도 모르는 사이에 덮어써버릴 수도 있으니까 조심하세요.

2. 디렉토리를 옮기는 경우

mv dir DEST

(1) DEST가 나타내는 경로가 이미 존재하는 디렉토리라면 그 디렉토리 안으로 dir가 이동합니다.

(2) DEST가 나타내는 경로가 아직 존재하지 않는 경로라면 그 경로명대로 이름 변경 혹은 위치 이동을 혹은 둘 다를 할 수도 있습니다. 예를 들면 DEST가 dir2면 이름만 dir2로 바뀌겠죠? 하지만 DEST가 ../dir라면 위치 이동만 할 겁니다. 마지막으로 DEST가 ../dir2라면 이름 변경도 되고 위치 이동도 되겠죠?

그럼 여기서 잠깐 어려운 퀴즈를 하나 내볼게요. DEST가 이미 존재하는 파일의 이름이라면 어떻게 될까요? 이렇게 되면 에러 메시지가 출력되면서 아무 동작도 일어나지 않습니다. 왜냐하면 하나의 디렉토리 안에는 같은 이름의 것들이 존재할 수 없기 때문입니다. 직접 확인해보세요.

mv 커맨드가 어떻게 동작하는지 살펴봤는데요. 직접 여기 나온 설명대로 디렉토리와 파일을 만들어서 환경을 조성해보고 연습해보세요. 디렉토리와 파일을 다루는 데 더 능숙해질 수 있을 겁니다.


cp : cpoy
cp first second : copy first file in current directory and create a same file named as second in current directory

* ls ~ : list home directory 

cp ~/.viminfo second : copy .viminfo in home directory and create a same file named as second in current directory
cp -i ~/.vininfo second : (interactive) ask before overwritting 

cp child baby : (child is directory) error -> child is a directory (not copied) -> not copied because directory has files or directories inside
cp -r child baby : (r : recursive) copy all the files and directories inside each directory recursively -> child directory is copied

rm : remove a file or directory
rm second : remove second file
rm baby : error -> baby is a directory
rm -r baby : remove all files and directories in baby directoy recursively
rm -r -i baby : ask before removing each file. If at least a file remains in the directory, baby directory is not removed.

cat : concatenate 이어 붙이다 -> 파일들의 내용을 이어붙이다 -> 파일들 내용 이어서 출력
cat twice : print twice file
cat twice zico : print twice file and then print zico file

less twice : print twice in the other window
* down arrow key -> go down
* up arrow key -> go up
* space bar key -> go down one page
* b -> go up one page
* G -> go to the last part
* g -> go to the first part
* q -> quit

less twice zico : print twice and zico but not together
* :n -> go to next file
* :p -> go to previous file

head zico : print first 10 lines of zico file
head -n 20 zico : print first 20 lines of zico file

tail zico : print the last 10 lines of zico file
tail -n 30 zico : print the last 30 lines of zico file

3. 커맨드를 자유자재로~

위 아래 방향키를 누르면 최근에 썼던 커맨드들을 볼수 있다 -> 커맨드 재사용 가능

history : print the history of command used before -> each command used is labeled with a number -> can use command again with !number 

tab key -> autocomplete the name of file or directory in current directory
ex) m + tab -> music

if there is more than one file or tab start with m
ex) m + tab -> do nothing 
ex) m + tab x 2 -> show the list of file names start with m

ctrl + a : 커서를 맨 앞으로 이동
ctrl + e : 커서를 맨 뒤로 이동
clear : 청소하다~

mkdir happy programming -> create two directories happy and programming
mkdir 'happy programming' -> create happy programming directory

4. Vim text editor
 normal mode / insert mode / visual mode / command mode 
 커서 이동    / 텍스트 입력    / 텍스트 블록 지정 / 내용 저장
 텍스트 붙혀놓기 /            / 텍스트 복사     / Vim 종료
 텍스트 삭제 /               /              / 특정 텍스트 검색 및 치환
 작업 취소  /                /             / 
 -> 모드별 기본적 기능들 
 
* Vim 은 시작할 때 normal mode
* 다른 모드로 전환하려면 normal mode를 거쳐야한다
* esc를 누르면 normal mode로 전환
* normal mode -> insert mode : a/A i/I o/O
* normal mode -> visual mode : v/V
* normal mode -> command mode : : / (:랑 /)

Insert Mode
* press a key on normal mode -> 커서를 한 칸 뒤로 옮기고 입력 모드로 전환 (append)
* press i key on normal mode -> 그냥 입력 모드로 전환
* press I key on normal mode -> 커서를 가장 첫번째 칸으로 이동하고 입력 모드로 전환
* press A key on normal mode -> 커서를 가장 마지막 칸으로 이동하고 입력 모드로 전환
* press o key on normal mode -> 커서를 다음 줄로 옮기고 입력 모드로 전환
* press O key on normal mode -> 커서 위에 빈 줄이 생기고 입력 모드로 전환

Command Mode
* Press : -> 명령 모드로 전환
* :w practice -> 현재 텍스트들을 현재 경로에 practice라는 파일로 저장
* :q -> quit VIM
* vim practice -> 현재 파일에 저장된 있는 practice 파일을 연다
* :w -> vim practice로 연 파일을 수정 후 다시 저장할 때는 :w만 써도 된다. (practice파일은 이미 생성되어 저장되 있었기 때문에)
* :wq -> 저장과 함께 vim 종료
* :q! -> 변경된 내용을 저장하지 않고 vim 종료 (파일 변경 후 :q를 하면 에러 메세지와 함께 vim을 종료하지 못한다)
* Press / -> 명령모드인데 쓸 수 있는 명령어가 다르다 (ex search)
* /like + enter -> 첫번째 like 위치로 간다 -> n -> 그 다음 like 위치로 간다 -> 만약 n말고 N을 입력하면 ->이 전의 like 위치로 간다
* :s/like/love -> 가장 첫번째 like를 love로 바꾼다 (s : substitue)
* :%s/like/love -> 각 줄의 가장 첫번째 like를 love로 바꾼다
* :%s/like/lovel/g -> 각 줄의 모든 like를 love로 바꾼다 (g : global)
* :%s/like/love/gc -> c 옵션을 추가하면 각각의 like를 love로 치환하기 전에 물어본다 (c : confirm)

Normal Mode
* 커서 이동 : 방향키 또는 알파벳 키 이용 -> 알파벳 키 이용시엔 h 좌 j 하 k상 l 우
* 먼거리 커서 이동 : 이동하고 싶은 칸수를 누른 상태에서 알파벳 방향키를 누른다
* ctrl + g 동시에 누르면 현재 몇번째 커서에 있는지 알려준다
* 0 : 커서가 그 줄의 첫번째 칸으로 이동
* $ : 커서가 줄의 마지막 칸으로 이동
* gg : 커서를 가장 첫번째 칸으로 이동
* G : 커서를 가장 마지막 칸으로 이동
* x : 현재 칸의 문자를 삭제한다
* 5 누른 상태에서 x : 현재 칸과 그 뒤의 4개의 문자를 한번에 삭제
* d x 2 : d 두번 누르면 현재 줄 전체 삭제
* 3 누른 상태에서 d x 3 : 현재 줄과 그 다음의 두 줄까지 삭제
* u : 이전 작업 취소하기 (undo)

Visual Mode
* v 키를 눌러 비쥬얼 모드로 간다 (v는 한 글자 씩 블록 지정을 할 때 쓴다)
* 블록 지정 가능 : 커서를 이동해 블록 지정 가능
* 블록 지정 후 : 1. 텍스트 삭제 가능 2. 복사/붙여놓기 가능 3. 잘라내기 가능
* x를 누르면 지정된 블록이 삭제된다
* y를 누르면 지정된 블록이 복사된다 (yank)
* p를 누르면 커서 다음 칸에 붙여놓기 된다
* P를 누르면 커서 다음 칸에 붙여놓기 된다
* V를 눌러 비쥬얼 모드로 간다 (V는 줄 단위로 블록 지정을 할 때 쓴다)
* V를 눌러 비쥬얼 모드로 가게되면 커서가 있던 줄 전체가 지정된다 이후 위 아래 방향키를 이용해서 줄단위로 블록을 지정할 수 있다
* d를 누르면 잘라내기를 할 수 있다 (delete) -> 이후 붙여놓기를 해서 자른 내용을 다시 붙일 수 있다

5. 외부 프로그램 설치하기

  여러분은 새로운 게임 프로그램을 사용하고 싶으면 어떻게 하나요? 그 게임의 사이트로 가서 설치 파일을 다운로드받고, 설치 파일을 실행해서 게임을 설치하시죠? 그런데 그건 GUI 환경에서 하는 방법입니다. 우리는 지금 CLI 환경에서 커맨드로 컴퓨터를 사용하는 방법을 배우고 있는데요. CLI 환경에서도 커맨드를 쓰면 외부에 있는 프로그램을 설치하는 게 가능합니다. 

그런데 외부 프로그램 설치의 경우는 이때까지 배웠던 내용과는 달리 환경에 따라 사용해야하는 커맨드가 달라집니다.

    macOS의 경우 homebrew 라는 커맨드
    우분투에서는 apt 라는 커맨드 

를 각각 써야 하는데요.

  예를 들어, A 운영 체제와 B 운영 체제가 둘다 유닉스 계열의 운영 체제라고 하더라도 어떤 상황에서는 서로 다른 커맨드를 써야하는 경우가 있는데 그 중 하나가 이렇게 외부 프로그램을 설치하는 경우입니다.

2가지 환경 모두에 대한 영상을 준비했으니 실제로 한번 따라해보시면서 외부 프로그램을 설치해보세요.

--------------------------------------------------------------------------------------------------------------------------

* Homebrew 홈피 가서 커맨드 복사 후 터미널에 입력해서 다운 받자
* Homebrew 설치 후 더 이상 입력값을 터미널에 입력할 수 없기 때문애 터미널 종료 후 다시 켜 본다
* brew help 라고 입력했을 때 값이 나오면 정상 설치 된거다
* Wget : 어떤 사이트에 접속해서 그 사이트를 이루고 있는 코드를 가져오는 프로그램
* brew install wget : Wget설치 명령어 -> 난 왜 설치가 안되지 ㅠㅠ 
* wget www.naver.com : naver 소스 코드를 가져온다 -> index.html에 저장된다 
* brew uninstall wget : Wget 삭제
* brew doctor : troubleshooting

-----------------------------------------------------------------------------------------------------------------------------------------------------
  이전 영상에서 우분투에서 외부 프로그램인 crack-attack을 설치할 때

sudo apt install crack-attack

라고 쓰고 실행했습니다. 그리고 이때 맨 앞에 sudo 라고 쓴 이유는 시스템에 프로그램을 설치할 때는 일반 사용자가 아닌 그보다 더 높은 관리자 권한이 필요하기 때문이라고 말씀드렸었는데요.

  사실 sudo 는 꼭 외부 프로그램을 설치할 때가 아니더라도 유닉스 시스템에서 종종 쓰일 때가 있습니다. 그건 바로 시스템 내에서 일반 사용자는 하지 못하고 오로지 관리자 계정으로만 할 수 있는 작업들을 해야할 때인데요. 그럴 때마다 sudo 를 맨 앞에 써주면 됩니다. 외부 프로그램 설치가 그런 작업 중 대표적인 예인 거구요. 사실 이 부분을 더 잘 알려면 유닉스에서 사용자 권한(permission)이라고 하는 부분을 배워야합니다.

  일단은 관리자 계정으로서의 권한을 갖고 어떤 작업을 해야할 때 sudo 를 가장 맨 앞에 써줘야 한다는 사실을 잘 기억하세요! 
